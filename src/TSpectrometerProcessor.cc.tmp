#include "TSpectrometerProcessor.h"

#include "constant.h"
#include <iostream>
#include <string>
#include <fstream>
#include <TClonesArray.h>
#include <TClass.h>
#include <TOpticsData.h>
#include <TParticleData.h>


using art::TSpectrometerProcessor;


ClassImp(TSpectrometerProcessor)

TSpectrometerProcessor::TSpectrometerProcessor()
: fOutput(NULL)
{


  Register(fMass("Mass","Mass of particle",938.7));
  Register(fAtomicNumber("AtomicNumber","Atomic number of particle (Z)",1));
  Register(fMassNumber("MassNumber","Mass number of particle (A)",1));
  Register(fRho("Rho","Rho of the spectrometer (m) ",3.0));
  Register(fMagneticField("MagneticField","Magnetic field of spectrometer (mT)",0));
  Register(fAngle("Angle","Angle of spectorometer (deg)",0));

  RegisterInputCollection("InputCollection",
			  "input collection",
			  fNameInput, "OpticsData",
			  &fInput, TClonesArray::Class_Name(),
			  art::TOpticsData::Class_Name());  

  RegisterOutputCollection("OutputCollection","output collection",
                            fNameOutput,"TParticleData",
			   &fOutput, TClonesArray::Class_Name(),
			   art::TParticleData::Class_Name());  

}


TSpectrometerProcessor::~TSpectrometerProcessor()
{
  delete fOutput;
}

namespace {
}


void TSpectrometerProcessor::Init(TEventCollection*){
   
}

void TSpectrometerProcessor::Process(){

  fOutput->Clear("C");
  Bool_t kProcessed = kFALSE;
  const Int_t nData = (*fInput)->GetEntriesFast();

  
  
  
  if (nData < 1) {
    kProcessed = kFALSE;    
  }
  else {
    kProcessed = kTRUE;    
    for (Int_t iData = 0; iData != nData; ++iData) {
      
      TParticleData *outData = NULL;
      outData = static_cast<TParticleData*>(fOutput->ConstructedAt(iData));

      TOpticsData *const inData = static_cast<TOpticsData*>((*fInput)->At(iData));
      
      double Delta = inData->GetDelta();
      double A = inData->GetA();
      double B = inData->GetB();

      double TKE = sqrt(fMass*fMass + pow(0.3*((double) fAtomicNumber)*fMagneticField*fRho*(1+Delta),2.0))-fMass;
      double theta_lab = TMath::RadToDeg()*atan( sqrt( pow( tan( atan(A)+fAngle*TMath::DegToRad() ),2.0) + pow(B,2.0)) );
      double phi_lab = TMath::RadToDeg()*atan(B);
            
      outData->SetTKE(TKE);
      outData->SetMass(fMass);
      outData->SetTheta(theta_lab);
      outData->SetPhi(phi_lab);


    }
  }
  
  return;
}
